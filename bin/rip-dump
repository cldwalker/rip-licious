#!/usr/bin/env ruby
# Usage: rip-dump [-d] [-D] [-r] [-R]
#
# Dumps ripenvs to a directory as ripfiles. Also diffs a dump and restores
#   from one with the following options.
# If -d (diff), displays a diff against the last dump.
# If -r (restore), restores all ripenvs by installing all packages.
# If -R (minimal-restore), only restores ripenvs that don't exist.
# If -D (directory), specifies a directory to save/restore the dump.
#   Default is ~/.rip_envs.

require 'rip/script'

minimal_restore = ARGV.delete('-R') || ARGV.delete('--minimal-restore')
restore = ARGV.delete('-r') || ARGV.delete('--restore')
diff = ARGV.delete('-d') || ARGV.delete('--diff')
directory = ARGV.delete('-D') || ARGV.delete('--directory') || "~/.rip_envs"
directory = File.expand_path directory

def dump_to_directory(dir)
  mkdir_p dir
  rm_f Dir.glob(dir+"/*")

  Rip.envs.inject({}) {|h,env|
    ENV['RIPENV'] = env
    list = rip('list -p')
    File.open("#{dir}/#{env}.rip", 'w') {|f| f.write(list) }
    h[env] = list.split("\n")
    h
  }
end

if diff
  require 'tmpdir'
  previous_dir = directory
  directory = Dir.tmpdir + '/rip_dump_diff'
  dump_to_directory directory
  abort "Previous dump doesn't exist" unless File.directory? previous_dir
  exec 'diff', '-br', previous_dir, directory
elsif minimal_restore || restore
  Dir["#{directory}/*"].each do |file|
    env = basename(file).sub('.rip', '')
    abort "Can't restore invalid ripfile #{file}" if env.empty?
    envdir = "#{Rip.dir}/#{env}"
    next if minimal_restore && File.exist?(envdir)

    rip(:create, env)
    ENV['RIPENV'] = env
    rip("install -o #{file}")
  end
else
  envs = dump_to_directory directory
  puts "Dumped #{envs.keys.size} ripenvs containing "+
    "#{envs.values.flatten.uniq.size} unique packages"
end